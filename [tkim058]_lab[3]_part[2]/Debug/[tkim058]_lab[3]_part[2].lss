
[tkim058]_lab[3]_part[2].elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000036c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000003e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000410  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000881  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c6  00000000  00000000  00000cf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d9  00000000  00000000  000014bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001898  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000429  00000000  00000000  000018ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000076  00000000  00000000  00001d15  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001d8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	47 d1       	rcall	.+654    	; 0x338 <main>
  aa:	5e c1       	rjmp	.+700    	; 0x368 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <Tick>:
#include <avr/io.h>
enum States{Start, Init, Wait, Add, Subtract}state;
unsigned char tmpC;

void Tick()
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
	
	switch(state)
  b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ba:	88 2f       	mov	r24, r24
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	82 30       	cpi	r24, 0x02	; 2
  c0:	91 05       	cpc	r25, r1
  c2:	19 f1       	breq	.+70     	; 0x10a <Tick+0x5c>
  c4:	83 30       	cpi	r24, 0x03	; 3
  c6:	91 05       	cpc	r25, r1
  c8:	2c f4       	brge	.+10     	; 0xd4 <Tick+0x26>
  ca:	00 97       	sbiw	r24, 0x00	; 0
  cc:	59 f0       	breq	.+22     	; 0xe4 <Tick+0x36>
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	b1 f0       	breq	.+44     	; 0xfe <Tick+0x50>
  d2:	1a c1       	rjmp	.+564    	; 0x308 <Tick+0x25a>
  d4:	83 30       	cpi	r24, 0x03	; 3
  d6:	91 05       	cpc	r25, r1
  d8:	09 f4       	brne	.+2      	; 0xdc <Tick+0x2e>
  da:	62 c0       	rjmp	.+196    	; 0x1a0 <Tick+0xf2>
  dc:	04 97       	sbiw	r24, 0x04	; 4
  de:	09 f4       	brne	.+2      	; 0xe2 <Tick+0x34>
  e0:	b9 c0       	rjmp	.+370    	; 0x254 <Tick+0x1a6>
  e2:	12 c1       	rjmp	.+548    	; 0x308 <Tick+0x25a>
	{
		case Start:
		tmpC = 7;
  e4:	87 e0       	ldi	r24, 0x07	; 7
  e6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpC>
		PORTC = tmpC;
  ea:	88 e2       	ldi	r24, 0x28	; 40
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <tmpC>
  f2:	fc 01       	movw	r30, r24
  f4:	20 83       	st	Z, r18
		state =Wait;break;
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  fc:	09 c1       	rjmp	.+530    	; 0x310 <Tick+0x262>
		case Init:
		state = Wait;
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		tmpC = 0;
 104:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <tmpC>
		break;
 108:	03 c1       	rjmp	.+518    	; 0x310 <Tick+0x262>
		case Wait:
		if((PINA & 0x01) && (PINA & 0x02))
 10a:	80 e2       	ldi	r24, 0x20	; 32
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	fc 01       	movw	r30, r24
 110:	80 81       	ld	r24, Z
 112:	88 2f       	mov	r24, r24
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	81 70       	andi	r24, 0x01	; 1
 118:	99 27       	eor	r25, r25
 11a:	89 2b       	or	r24, r25
 11c:	71 f0       	breq	.+28     	; 0x13a <Tick+0x8c>
 11e:	80 e2       	ldi	r24, 0x20	; 32
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	fc 01       	movw	r30, r24
 124:	80 81       	ld	r24, Z
 126:	88 2f       	mov	r24, r24
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	82 70       	andi	r24, 0x02	; 2
 12c:	99 27       	eor	r25, r25
 12e:	89 2b       	or	r24, r25
 130:	21 f0       	breq	.+8      	; 0x13a <Tick+0x8c>
		{
			state = Init;
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 138:	32 c0       	rjmp	.+100    	; 0x19e <Tick+0xf0>
		}
		else if((PINA & 0x01) && !(PINA & 0x02))
 13a:	80 e2       	ldi	r24, 0x20	; 32
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	fc 01       	movw	r30, r24
 140:	80 81       	ld	r24, Z
 142:	88 2f       	mov	r24, r24
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	81 70       	andi	r24, 0x01	; 1
 148:	99 27       	eor	r25, r25
 14a:	89 2b       	or	r24, r25
 14c:	71 f0       	breq	.+28     	; 0x16a <Tick+0xbc>
 14e:	80 e2       	ldi	r24, 0x20	; 32
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	fc 01       	movw	r30, r24
 154:	80 81       	ld	r24, Z
 156:	88 2f       	mov	r24, r24
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	82 70       	andi	r24, 0x02	; 2
 15c:	99 27       	eor	r25, r25
 15e:	89 2b       	or	r24, r25
 160:	21 f4       	brne	.+8      	; 0x16a <Tick+0xbc>
		{
			state = Add;
 162:	83 e0       	ldi	r24, 0x03	; 3
 164:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 168:	1a c0       	rjmp	.+52     	; 0x19e <Tick+0xf0>
		}
		else if(!(PINA & 0x01) && (PINA & 0x02))
 16a:	80 e2       	ldi	r24, 0x20	; 32
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	fc 01       	movw	r30, r24
 170:	80 81       	ld	r24, Z
 172:	88 2f       	mov	r24, r24
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	81 70       	andi	r24, 0x01	; 1
 178:	99 27       	eor	r25, r25
 17a:	89 2b       	or	r24, r25
 17c:	09 f0       	breq	.+2      	; 0x180 <Tick+0xd2>
 17e:	c7 c0       	rjmp	.+398    	; 0x30e <Tick+0x260>
 180:	80 e2       	ldi	r24, 0x20	; 32
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	fc 01       	movw	r30, r24
 186:	80 81       	ld	r24, Z
 188:	88 2f       	mov	r24, r24
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	82 70       	andi	r24, 0x02	; 2
 18e:	99 27       	eor	r25, r25
 190:	89 2b       	or	r24, r25
 192:	09 f4       	brne	.+2      	; 0x196 <Tick+0xe8>
 194:	bc c0       	rjmp	.+376    	; 0x30e <Tick+0x260>
		{
			state = Subtract;
 196:	84 e0       	ldi	r24, 0x04	; 4
 198:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		
		}
		break;
 19c:	b8 c0       	rjmp	.+368    	; 0x30e <Tick+0x260>
 19e:	b7 c0       	rjmp	.+366    	; 0x30e <Tick+0x260>
		case Add:
		tmpC=(tmpC<9)?tmpC+1:tmpC;
 1a0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpC>
 1a4:	89 30       	cpi	r24, 0x09	; 9
 1a6:	20 f4       	brcc	.+8      	; 0x1b0 <Tick+0x102>
 1a8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpC>
 1ac:	8f 5f       	subi	r24, 0xFF	; 255
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <Tick+0x106>
 1b0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpC>
 1b4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpC>
		
		if((PINA & 0x01) && (PINA & 0x02))
 1b8:	80 e2       	ldi	r24, 0x20	; 32
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	fc 01       	movw	r30, r24
 1be:	80 81       	ld	r24, Z
 1c0:	88 2f       	mov	r24, r24
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	81 70       	andi	r24, 0x01	; 1
 1c6:	99 27       	eor	r25, r25
 1c8:	89 2b       	or	r24, r25
 1ca:	71 f0       	breq	.+28     	; 0x1e8 <Tick+0x13a>
 1cc:	80 e2       	ldi	r24, 0x20	; 32
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	fc 01       	movw	r30, r24
 1d2:	80 81       	ld	r24, Z
 1d4:	88 2f       	mov	r24, r24
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	82 70       	andi	r24, 0x02	; 2
 1da:	99 27       	eor	r25, r25
 1dc:	89 2b       	or	r24, r25
 1de:	21 f0       	breq	.+8      	; 0x1e8 <Tick+0x13a>
		{
			state = Init;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1e6:	2f c0       	rjmp	.+94     	; 0x246 <Tick+0x198>
		}
		else if(!(PINA & 0x01) && (PINA & 0x02))
 1e8:	80 e2       	ldi	r24, 0x20	; 32
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	fc 01       	movw	r30, r24
 1ee:	80 81       	ld	r24, Z
 1f0:	88 2f       	mov	r24, r24
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	81 70       	andi	r24, 0x01	; 1
 1f6:	99 27       	eor	r25, r25
 1f8:	89 2b       	or	r24, r25
 1fa:	71 f4       	brne	.+28     	; 0x218 <Tick+0x16a>
 1fc:	80 e2       	ldi	r24, 0x20	; 32
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	fc 01       	movw	r30, r24
 202:	80 81       	ld	r24, Z
 204:	88 2f       	mov	r24, r24
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	82 70       	andi	r24, 0x02	; 2
 20a:	99 27       	eor	r25, r25
 20c:	89 2b       	or	r24, r25
 20e:	21 f0       	breq	.+8      	; 0x218 <Tick+0x16a>
		{
			state = Subtract;
 210:	84 e0       	ldi	r24, 0x04	; 4
 212:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 216:	17 c0       	rjmp	.+46     	; 0x246 <Tick+0x198>
		}
		else if(!(PINA & 0x01) && !(PINA & 0x02))
 218:	80 e2       	ldi	r24, 0x20	; 32
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	fc 01       	movw	r30, r24
 21e:	80 81       	ld	r24, Z
 220:	88 2f       	mov	r24, r24
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	81 70       	andi	r24, 0x01	; 1
 226:	99 27       	eor	r25, r25
 228:	89 2b       	or	r24, r25
 22a:	69 f4       	brne	.+26     	; 0x246 <Tick+0x198>
 22c:	80 e2       	ldi	r24, 0x20	; 32
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	fc 01       	movw	r30, r24
 232:	80 81       	ld	r24, Z
 234:	88 2f       	mov	r24, r24
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	82 70       	andi	r24, 0x02	; 2
 23a:	99 27       	eor	r25, r25
 23c:	89 2b       	or	r24, r25
 23e:	19 f4       	brne	.+6      	; 0x246 <Tick+0x198>
		{
			state = Wait;
 240:	82 e0       	ldi	r24, 0x02	; 2
 242:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		}
		PORTC = tmpC;
 246:	88 e2       	ldi	r24, 0x28	; 40
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <tmpC>
 24e:	fc 01       	movw	r30, r24
 250:	20 83       	st	Z, r18
		break;
 252:	5e c0       	rjmp	.+188    	; 0x310 <Tick+0x262>
		case Subtract:
		tmpC = (tmpC > 0) ? tmpC-1:tmpC;
 254:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpC>
 258:	88 23       	and	r24, r24
 25a:	21 f0       	breq	.+8      	; 0x264 <Tick+0x1b6>
 25c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpC>
 260:	81 50       	subi	r24, 0x01	; 1
 262:	02 c0       	rjmp	.+4      	; 0x268 <Tick+0x1ba>
 264:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpC>
 268:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpC>
		
		if((PINA & 0x01) && (PINA & 0x02))
 26c:	80 e2       	ldi	r24, 0x20	; 32
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	fc 01       	movw	r30, r24
 272:	80 81       	ld	r24, Z
 274:	88 2f       	mov	r24, r24
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	81 70       	andi	r24, 0x01	; 1
 27a:	99 27       	eor	r25, r25
 27c:	89 2b       	or	r24, r25
 27e:	71 f0       	breq	.+28     	; 0x29c <Tick+0x1ee>
 280:	80 e2       	ldi	r24, 0x20	; 32
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	fc 01       	movw	r30, r24
 286:	80 81       	ld	r24, Z
 288:	88 2f       	mov	r24, r24
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	82 70       	andi	r24, 0x02	; 2
 28e:	99 27       	eor	r25, r25
 290:	89 2b       	or	r24, r25
 292:	21 f0       	breq	.+8      	; 0x29c <Tick+0x1ee>
		{
			state = Init;
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 29a:	2f c0       	rjmp	.+94     	; 0x2fa <Tick+0x24c>
		}
		else if((PINA & 0x01) && !(PINA & 0x02))
 29c:	80 e2       	ldi	r24, 0x20	; 32
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	fc 01       	movw	r30, r24
 2a2:	80 81       	ld	r24, Z
 2a4:	88 2f       	mov	r24, r24
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	81 70       	andi	r24, 0x01	; 1
 2aa:	99 27       	eor	r25, r25
 2ac:	89 2b       	or	r24, r25
 2ae:	71 f0       	breq	.+28     	; 0x2cc <Tick+0x21e>
 2b0:	80 e2       	ldi	r24, 0x20	; 32
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	fc 01       	movw	r30, r24
 2b6:	80 81       	ld	r24, Z
 2b8:	88 2f       	mov	r24, r24
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	82 70       	andi	r24, 0x02	; 2
 2be:	99 27       	eor	r25, r25
 2c0:	89 2b       	or	r24, r25
 2c2:	21 f4       	brne	.+8      	; 0x2cc <Tick+0x21e>
		{
			state = Add;
 2c4:	83 e0       	ldi	r24, 0x03	; 3
 2c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 2ca:	17 c0       	rjmp	.+46     	; 0x2fa <Tick+0x24c>
		}
		else if(!(PINA & 0x01) && !(PINA & 0x02))
 2cc:	80 e2       	ldi	r24, 0x20	; 32
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	fc 01       	movw	r30, r24
 2d2:	80 81       	ld	r24, Z
 2d4:	88 2f       	mov	r24, r24
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	81 70       	andi	r24, 0x01	; 1
 2da:	99 27       	eor	r25, r25
 2dc:	89 2b       	or	r24, r25
 2de:	69 f4       	brne	.+26     	; 0x2fa <Tick+0x24c>
 2e0:	80 e2       	ldi	r24, 0x20	; 32
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	fc 01       	movw	r30, r24
 2e6:	80 81       	ld	r24, Z
 2e8:	88 2f       	mov	r24, r24
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	82 70       	andi	r24, 0x02	; 2
 2ee:	99 27       	eor	r25, r25
 2f0:	89 2b       	or	r24, r25
 2f2:	19 f4       	brne	.+6      	; 0x2fa <Tick+0x24c>
		{
			state = Wait;
 2f4:	82 e0       	ldi	r24, 0x02	; 2
 2f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		}
		PORTC = tmpC;
 2fa:	88 e2       	ldi	r24, 0x28	; 40
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <tmpC>
 302:	fc 01       	movw	r30, r24
 304:	20 83       	st	Z, r18
		break;
 306:	04 c0       	rjmp	.+8      	; 0x310 <Tick+0x262>
		
		default:
		state = Start;
 308:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		break;
 30c:	01 c0       	rjmp	.+2      	; 0x310 <Tick+0x262>
		else if(!(PINA & 0x01) && (PINA & 0x02))
		{
			state = Subtract;
		
		}
		break;
 30e:	00 00       	nop
		
		default:
		state = Start;
		break;
	}
	switch (state) {
 310:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 314:	88 2f       	mov	r24, r24
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	09 f0       	breq	.+2      	; 0x31e <Tick+0x270>
		case Init:  
		tmpC = 0;                         
		PORTC = tmpC; break;                
		default:
		break;
 31c:	09 c0       	rjmp	.+18     	; 0x330 <Tick+0x282>
		state = Start;
		break;
	}
	switch (state) {
		case Init:  
		tmpC = 0;                         
 31e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <tmpC>
		PORTC = tmpC; break;                
 322:	88 e2       	ldi	r24, 0x28	; 40
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <tmpC>
 32a:	fc 01       	movw	r30, r24
 32c:	20 83       	st	Z, r18
 32e:	00 00       	nop
		default:
		break;
	}
}
 330:	00 00       	nop
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	08 95       	ret

00000338 <main>:
int main(void)
{
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	cd b7       	in	r28, 0x3d	; 61
 33e:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF;
 340:	81 e2       	ldi	r24, 0x21	; 33
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	fc 01       	movw	r30, r24
 346:	10 82       	st	Z, r1
 348:	82 e2       	ldi	r24, 0x22	; 34
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	2f ef       	ldi	r18, 0xFF	; 255
 34e:	fc 01       	movw	r30, r24
 350:	20 83       	st	Z, r18
	DDRC = 0xFF; PORTC = 0x00;
 352:	87 e2       	ldi	r24, 0x27	; 39
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	2f ef       	ldi	r18, 0xFF	; 255
 358:	fc 01       	movw	r30, r24
 35a:	20 83       	st	Z, r18
 35c:	88 e2       	ldi	r24, 0x28	; 40
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	fc 01       	movw	r30, r24
 362:	10 82       	st	Z, r1
	
    while (1) 
    {
		Tick();
 364:	a4 de       	rcall	.-696    	; 0xae <Tick>
	}
 366:	fe cf       	rjmp	.-4      	; 0x364 <main+0x2c>

00000368 <_exit>:
 368:	f8 94       	cli

0000036a <__stop_program>:
 36a:	ff cf       	rjmp	.-2      	; 0x36a <__stop_program>
